import { useState, useEffect } from 'react';
import prisma from '../../prisma/prisma';
import ClassInviteTable from '../../components/ClassInviteTable';
import Head from 'next/head';
import Navbar from '../../components/navbar';
import Link from 'next/link';
import { getSession } from 'next-auth/react';
import Modal from '../../components/modal';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export async function getServerSideProps(ctx) {
  try {
    const userSession = await getSession(ctx);

    if (!userSession) {
      return {
        redirect: {
          destination: '/',
          permanent: false,
        },
      };
    }

    const userInfo = await prisma.User.findMany({
      where: {
        email: userSession.user.email,
      },
    });

    if (userInfo.length === 0) {
      return {
        redirect: {
          destination: '/error',
          permanent: false,
        },
      };
    }

    const { role, id: userId } = userInfo[0];

    if (role === 'ADMIN') {
      return {
        redirect: {
          destination: '/admin',
          permanent: false,
        },
      };
    } else if (role !== 'TEACHER') {
      return {
        redirect: {
          destination: '/error',
          permanent: false,
        },
      };
    }

    const classrooms = await prisma.Classroom.findMany({
      where: {
        classroomTeacherId: userId,
      },
    });

    const output = classrooms.map((classroom) => ({
      classroomName: classroom.classroomName,
      classroomId: classroom.classroomId,
      description: classroom.description,
      createdAt: JSON.stringify(classroom.createdAt),
      fccCertifications: classroom.fccCertifications,
    }));

    const superblocksres = await fetch(
      'https://www.freecodecamp.org/curriculum-data/v1/available-superblocks.json'
    );

    const superblocksreq = await superblocksres.json();

    const certificationNames = superblocksreq.superblocks.map((x, i) => ({
      value: i,
      label: x.dashedName,
      displayName: x.title,
    }));

    return {
      props: {
        userSession,
        classrooms: output,
        user: userId,
        certificationNames,
      },
    };
  } catch (error) {
    console.error('Error in getServerSideProps:', error);
    return {
      props: {
        error: true,
      },
    };
  }
}

export default function Classes({
  userSession,
  classrooms,
  user,
  certificationNames,
  error,
}) {
  const [currentClassrooms, setCurrentClassrooms] = useState(classrooms);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(false);
  }, [classrooms]);

  const handleDelete = (classToDelete) => {
    setCurrentClassrooms((currentClassrooms) =>
      currentClassrooms.filter(
        (currClass) => currClass.classroomId !== classToDelete
      )
    );
  };

  const handleEdit = (classToEditId, updatedData) => {
    const updatedClassrooms = currentClassrooms.map((currClass) =>
      classToEditId === currClass.classroomId
        ? {
            ...currClass,
            classroomName: updatedData.classroomName,
            description: updatedData.description,
            fccCertifications: updatedData.fccCertifications,
          }
        : currClass
    );

    setCurrentClassrooms(updatedClassrooms);
  };

  return (
    <>
      <ToastContainer
        position='bottom-left'
        autoClose={5000}
        hideProgressBar={true}
        closeOnClick
        pauseOnFocusLoss
        pauseOnHover
        theme
      />
      <Head>
        <title>Create Next App</title>
        <meta
          name='description'
          content='Generated by create next app'
        />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {userSession && (
        <>
          <Navbar>
            <div className='border-solid border-2 pl-4 pr-4'>
              <Link href={'/classes'}>Classes</Link>
            </div>
            <div className='border-solid border-2 pl-4 pr-4'>
              <Link href={'/'}> Menu</Link>
            </div>
          </Navbar>

          <div className={'text-center p-10'}>
            <h1> Copy invite code by clicking on your preferred class. </h1>
          </div>

          {loading && <p>Loading...</p>}

          {!loading && !error && (
            <>
              <Modal
                userId={user}
                certificationNames={certificationNames}
                currentClassrooms={currentClassrooms}
                setCurrentClassrooms={setCurrentClassrooms}
              />

              {currentClassrooms.map((classroom) => (
                <div key={classroom.classroomId}>
                  <ClassInviteTable
                    currentClass={classroom}
                    certificationNames={certificationNames}
                    currentClassrooms={currentClassrooms}
                    handleDelete={handleDelete}
                    handleEdit={handleEdit}
                    userId={user}
                  />
                </div>
              ))}
            </>
          )}
        </>
      )}
    </>
  );
}
